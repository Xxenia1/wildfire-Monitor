# -*- coding: utf-8 -*-
"""daily_NDVIipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1feLPsMvKvxM3Da86WBacIUA3rXv208IQ
"""

!pip install geemap
!pip install -U google-api-python-client
!pip install pycrs
!pip install ffmpeg-python
!pip install imageio

import imageio
import matplotlib.pyplot as plt
from google.colab import files
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
import ee
import geemap
import folium
import pandas as pd
import geopandas as gpd
import os
import numpy as np
from datetime import datetime, timedelta

from google.colab import drive
drive.mount('/content/drive')

# GEE authenticate
ee.Authenticate()
ee.Initialize(project='canvas-radio-444702-k2')

# 2. define date and boundary
start = datetime(2024,1,1)
end   = datetime(2024,12,31)
dates = pd.date_range(start, end, freq='D')
cal   = ee.FeatureCollection('TIGER/2018/States') \
            .filter(ee.Filter.eq('NAME','California')).geometry()

def add_ndvi(img):
  return img.normalizedDifference(['sur_refl_b02','sur_refl_b01']) \
            .rename('NDVI') \
            .copyProperties(img, ['system:time_start'])

def mask_clouds_qc(img):
  qc = img.select('QC_500m')
  return img.updateMask(qc.eq(0))

daily_ndvi = (
  ee.ImageCollection('MODIS/061/MOD09GA')
    .filterDate('2024-01-01','2025-01-01')
    .map(add_ndvi)
    .select('NDVI')
)

count = daily_ndvi.filterDate('2024-01-01','2024-01-02').size().getInfo()
print("2024-01-01 NDVI Frame rate：", count)

# Visualization and output
vis = {'min':0,'max':1,'palette':['ffffff','ffeda0','feb24c','f03b20','bd0026']}
region = cal.bounds().getInfo()['coordinates'][0]  # 加州 bbox
dimensions = 256          # # Each frame is 256px, can be increased as needed
crs        = 'EPSG:4326'
fps        = 5
gif_path   = '/content/daily_ca_ndvi_2024.gif'

# —— Looping screenshots and mosaics
frames = []
img_fallback = None
for d in dates:
    d0 = d.strftime('%Y-%m-%d')
    d1 = (d + timedelta(days=1)).strftime('%Y-%m-%d')
    # check frame
    cnt = daily_ndvi.filterDate(d0, d1).size().getInfo()
    if cnt > 0:
        img = daily_ndvi.filterDate(d0, d1).median() \
               .set('system:time_start', ee.Date(d0).millis())
        img_fallback = img
    else:
        img = img_fallback

   # get image url (based on lat&lng)
    thumb_url = img.getThumbURL({
        'min':        vis['min'],
        'max':        vis['max'],
        'palette':    vis['palette'],
        'region':     region,
        'crs':        crs,
        'dimensions': dimensions
    })
    arr = imageio.imread(thumb_url)

    fig, ax = plt.subplots(figsize=(4,4))
    ax.imshow(arr); ax.axis('off')
    # add date
    ax.text(0.02, 0.98, d0,
            transform=ax.transAxes,
            fontsize=10, fontweight='bold',
            va='top', ha='left',
            color='black',
            backgroundcolor=(1,1,1,0.6))
    # add legend (colorbar)
    cax = fig.add_axes([0.80,0.15,0.05,0.7])
    import matplotlib as mpl
    norm = mpl.colors.Normalize(vmin=vis['min'], vmax=vis['max'])
    cb = mpl.colorbar.ColorbarBase(
        cax, cmap=mpl.cm.get_cmap('RdYlGn'), norm=norm)
    cb.set_label('NDVI', fontsize=8)
    plt.tight_layout()

    # convert to frame
    canvas = FigureCanvas(fig)
    canvas.draw()
    buf, (w,h) = canvas.print_to_buffer()
    frame = np.frombuffer(buf, dtype=np.uint8).reshape((h,w,4))[...,:3]
    frames.append(frame)
    plt.close(fig)

# download gif
imageio.mimsave(gif_path, frames, fps=fps)
from google.colab import files
files.download(gif_path)

"""Part 2: Create an animation of a polyline evolving over time"""

start = datetime(2024, 1, 1)
end   = datetime(2024, 12, 31)
dates = pd.date_range(start, end, freq='D')

# loop reduceregion to get median
records = []
for d in dates:
    d0 = d.strftime('%Y-%m-%d')
    d1 = (d + timedelta(days=1)).strftime('%Y-%m-%d')
    # use median only if there's image, otherwise, use the value of the previous day to "fall back and fill"
    cnt = daily_ndvi.filterDate(d0, d1).size().getInfo()
    if cnt > 0:
        img = daily_ndvi.filterDate(d0, d1).median()
        val = img.reduceRegion(
            reducer=ee.Reducer.median(),
            geometry=cal,
            scale=500,
            maxPixels=1e13
        ).get('NDVI').getInfo()
        last_valid = val
    else:
        val = last_valid  # fallback padding

    records.append({'date': d, 'ndvi': val})

df = pd.DataFrame(records)
df.head()

records = []
last_valid = None
for d in dates:
    d0 = d.strftime('%Y-%m-%d')
    d1 = (d + timedelta(days=1)).strftime('%Y-%m-%d')
    cnt = daily_ndvi.filterDate(d0, d1).size().getInfo()
    if cnt > 0:
        # get median NDVI
        img = daily_ndvi.filterDate(d0, d1).median()
        val = img.reduceRegion(
            reducer=ee.Reducer.median(),
            geometry=cal,
            scale=500,
            maxPixels=1e13
        ).get('NDVI').getInfo()
        last_valid = val
    else:
        # Fill with the value of the previous day to ensure the sequence is continuous
        val = last_valid

    records.append({'date': d, 'ndvi': val})

df = pd.DataFrame(records)

print(df.head(), df.tail())
print("共有多少有效天数？", df['ndvi'].notna().sum())

import io, imageio

# catch frame
frames = []
for i in range(1, len(df)+1):
    sub = df.iloc[:i]
    last_date = sub['date'].iloc[-1]

    # create canvas
    fig, ax = plt.subplots(figsize=(6,4))
    ax.plot(sub['date'], sub['ndvi'], color='#ffe082', lw=2)
    ax.scatter([last_date], [sub['ndvi'].iloc[-1]], s=50, color='tab:orange')
    ax.text(0.02, 0.88,
            last_date.strftime('%Y-%m-%d'),
            transform=ax.transAxes,
            fontsize=12, fontweight='bold',
            backgroundcolor=(1,1,1,0.6))
    ax.set_title('California Daily NDVI 2024')
    ax.set_xlabel('Date'); ax.set_ylabel('NDVI (median)')
    ax.set_xlim(df['date'].min(), df['date'].max())
    ax.set_ylim(0,1)
    ax.xaxis.set_major_locator(mdates.MonthLocator())
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b'))
    plt.tight_layout()

    buf = io.BytesIO()
    fig.savefig(buf, format='png')
    buf.seek(0)
    img = imageio.imread(buf)
    frames.append(img)
    plt.close(fig)

# create gif
out_gif = '/content/ca_daily_ndvi_line.gif'
imageio.mimsave(out_gif, frames, fps=10)
print('save to:', out_gif)

# display in colab -- check
from IPython.display import HTML
import base64
with open(out_gif,'rb') as f:
    b64 = base64.b64encode(f.read()).decode()
HTML(f'<img src="data:image/gif;base64,{b64}" style="max-width:100%;">')









