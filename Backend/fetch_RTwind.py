# -*- coding: utf-8 -*-
"""fetch_RTwind.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B_WmEKymiB0IAVIEGtT8xt7gp3NTq41M
"""

#!pip install herbie-data cfgrib xarray numpy google-cloud-storage earthengine-api

# %%
import ee
import json
import tempfile
import shutil
import numpy as np
import xarray as xr
from herbie import Herbie
from datetime import datetime
from google.cloud import storage

# GEE authenticate
ee.Authenticate()
ee.Initialize(project='canvas-radio-444702-k2')

# %% Get today's date in YYYYMMDD format
today = datetime.utcnow().strftime("%Y%m%d")

# %% create temporary dictionary for file download
temp_dir = tempfile.mkdtemp()
print(f"[INFO] Temporary directory created at: {temp_dir}")

# %% Fetch the latest HRRR surface data using Herbie
H = Herbie(
    date=today,   # Use today's date
    model="hrrr",
    product="sfc", # model product
    fxx=0,  # Forecast hour (0 = analysis time)
    save_dir=temp_dir #temporary file dictionary
)

# only download 10m wind U/V components
subset_path = H.download(r":[U|V]GRD:10 m above", verbose=True)

# Open dataset and crop to California + Pacific coast
ds = xr.open_dataset(subset_path, engine="cfgrib")
print (ds)

# Set CA + ocean bounding box
lat_min, lat_max = 31, 43
lon_min, lon_max = 233, 247

# Extract lat/lon fields
lat = ds["latitude"]
lon = ds["longitude"]

# Build mask
lat_mask = (lat >= lat_min) & (lat <= lat_max)
lon_mask = (lon >= lon_min) & (lon <= lon_max)
geo_mask = lat_mask & lon_mask

print("Latitude range:", lat.min().values, "to", lat.max().values)
print("Longitude range:", lon.min().values, "to", lon.max().values)

# Apply mask
ds_cropped = ds.where(geo_mask, drop=True)

# Check
print(ds_cropped)

# read data
u10 = ds_cropped["u10"].values.tolist()
v10 = ds_cropped["v10"].values.tolist()
lat_out = ds_cropped["latitude"].values.tolist()
lon_out = ds_cropped["longitude"].values.tolist()

# create json
wind_json = {
    "date": today,
    "u": u10,
    "v": v10,
    "latitude": lat_out,
    "longitude": lon_out
}

# save to json
import json

with open("wind_field.json", "w") as f:
    json.dump(wind_json, f)

# upload to GCS
client = storage.Client()
bucket = client.bucket("wildfire-monitor-data")
blob = bucket.blob(f"wind/{today}_wind.json")
blob.upload_from_filename("wind_field.json")

print(f"[âœ…] Wind JSON uploaded to GCS as: wind/{today}_wind.json")